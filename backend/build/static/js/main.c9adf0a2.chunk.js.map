{"version":3,"sources":["components/services/persons.js","components/Filter.js","components/Rows.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","person","post","id","delete","put","Filter","props","onChange","handleChange","value","Persons","persons","map","p","key","name","number","onClick","deletePerson","Notification","notification","message","style","color","type","background","fontSize","borderStyle","borderRadius","padding","marginBottom","PersonForm","onSubmit","handleSubmit","handleNameChange","newName","handleNumberChange","newNumber","className","App","useState","setPersons","setNewName","setNewNumber","filter","setFilter","setNotification","useEffect","personService","notify","setTimeout","personsToShow","length","toLowerCase","includes","event","target","preventDefault","existingPerson","find","window","confirm","replacedPerson","createdPerson","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9adf0a2.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"api/persons\";\n\nconst getAll = () => {\n\tconst promise = axios.get(baseUrl);\n\n\treturn promise.then(response => response.data);\n};\n\nconst create = person => {\n\tconst promise = axios.post(baseUrl, person);\n\n\treturn promise.then(response => response.data);\n};\n\nconst remove = id => {\n\tconst promise = axios.delete(`${baseUrl}/${id}`);\n\n\treturn promise.then(response => response.data);\n};\n\nconst replace = person => {\n\tconst promise = axios.put(`${baseUrl}/${person.id}`, person);\n\n\treturn promise.then(response => response.data);\n};\n\nexport default {\n\tgetAll,\n\tcreate,\n\tremove,\n\treplace\n};\n","import React from \"react\";\n\nconst Filter = props => {\n\treturn (\n\t\t<div>\n\t\t\tFind Person\n\t\t\t<input onChange={props.handleChange} value={props.value} />\n\t\t</div>\n\t);\n};\n\nexport default Filter;\n","import React from \"react\";\nconst Persons = props => {\n\treturn props.persons.map(p => (\n\t\t<div key={p.name}>\n\t\t\t{p.name} {p.number}{\" \"}\n\t\t\t<button onClick={() => props.deletePerson(p.id)}>Delete</button>\n\t\t</div>\n\t));\n};\n\nexport default Persons;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./components/services/persons\";\nimport Filter from \"./components/Filter\";\nimport Persons from \"./components/Rows\";\n\nconst Notification = ({ notification }) => {\n  if (notification.message === null) {\n    return null;\n  }\n\n  const style = {\n    color: notification.type === \"error\" ? \"red\" : \"green\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  };\n\n  return <div style={style}>{notification.message}</div>;\n};\n\nconst PersonForm = props => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        Name: <input onChange={props.handleNameChange} value={props.newName} />\n      </div>\n      <div>\n        Number:{\" \"}\n        <input onChange={props.handleNumberChange} value={props.newNumber} />\n      </div>\n\n      <button className=\"btn\" type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [notification, setNotification] = useState({\n    message: null\n  });\n\n  useEffect(() => {\n    personService.getAll().then(data => {\n      setPersons(data);\n    });\n  }, []);\n\n  const handleNameChange = event => setNewName(event.target.value);\n  const handleNumberChange = event => setNewNumber(event.target.value);\n  const handleFilterChange = event => setFilter(event.target.value);\n\n  const notify = (message, type = \"success\") => {\n    setNotification({ message, type });\n    setTimeout(() => setNotification({ message: null }), 10000);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const existingPerson = persons.find(p => p.name === newName);\n\n    if (existingPerson) {\n      const ok = window.confirm(`Replace ${newName}?`);\n\n      if (ok) {\n        personService\n          .replace({\n            ...existingPerson,\n            number: newNumber\n          })\n          .then(replacedPerson => {\n            setPersons(\n              persons.map(p => (p.name === newName ? replacedPerson : p))\n            );\n            setNewName(\"\");\n            setNewNumber(\"\");\n            notify(`Replaced ${newName}!`);\n          });\n        /*\n          .catch(() => {\n            setPersons(persons.filter(p => p.name !== newName))\n            notify(`HenkilÃ¶n ${newName} oli jo poistettu`, 'error')\n          })\n          */\n      }\n\n      return;\n    }\n\n    personService\n      .create({\n        name: newName,\n        number: newNumber\n      })\n      .then(createdPerson => {\n        setPersons(persons.concat(createdPerson));\n        setNewName(\"\");\n        setNewNumber(\"\");\n        notify(`Deleted ${createdPerson.name}`);\n      });\n  };\n\n  const deletePerson = id => {\n    const person = persons.find(p => p.id === id);\n    const ok = window.confirm(`Deleted ${person.name}!`);\n    if (ok) {\n      personService.remove(id).then(() => {\n        setPersons(persons.filter(p => p.id !== id));\n      });\n      notify(`Deleted ${person.name}`);\n    }\n  };\n\n  const personsToShow =\n    filter.length === 0\n      ? persons\n      : persons.filter(p =>\n          p.name.toLowerCase().includes(filter.toLowerCase())\n        );\n\n  return (\n    <div className=\"container font4\">\n      <h2>Phonebook</h2>\n\n      <Notification notification={notification} />\n\n      <Filter handleChange={handleFilterChange} value={filter} />\n      <br />\n      <h3>Add a Contact</h3>\n\n      <PersonForm\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        handleSubmit={handleSubmit}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <br />\n      <h3>Numbers</h3>\n\n      <Persons persons={personsToShow} deletePerson={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}